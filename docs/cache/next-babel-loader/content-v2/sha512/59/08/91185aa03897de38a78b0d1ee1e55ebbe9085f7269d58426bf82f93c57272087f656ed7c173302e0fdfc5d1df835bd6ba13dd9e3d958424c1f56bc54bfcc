{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography, TextFieldComponent, ButtonComponent } from 'components/atoms';\nconst useStyle = makeStyles(theme => ({}));\n\nconst AddEventBanner = props => {\n  const validate = {\n    props\n  };\n  const style = useStyle();\n  const {\n    0: fieldToValidate,\n    1: setFieldValidation\n  } = useState({\n    title: false,\n    date: false,\n    type: false\n  });\n  const {\n    0: inputFieldValue,\n    1: setFieldValue\n  } = useState({\n    title: '',\n    description: '',\n    date: '',\n    type: ''\n  });\n  const validateField = useCallback(field => {\n    const input = inputFieldValue[field];\n    const currentValidationState = fieldToValidate;\n\n    if (input === null || input === '') {\n      currentValidationState[field] = true;\n    } else {\n      currentValidationState[field] = false;\n    }\n\n    setFieldValidation(_objectSpread({}, currentValidationState));\n    return !currentValidationState[field];\n  }, [inputFieldValue, fieldToValidate, setFieldValidation]);\n  const isValid = useCallback(() => {\n    let validationStatus = true;\n    Object.keys(fieldToValidate).map((key, value) => {\n      validationStatus = validationStatus && validateField(key);\n      console.log(validationStatus);\n    });\n    return validationStatus;\n  }, [fieldToValidate, validateField]);\n  const handleFieldChange = useCallback((field, value) => {\n    const currentValidationState = fieldToValidate;\n    currentValidationState[field] = false;\n    setFieldValidation(_objectSpread({}, currentValidationState));\n    const currentFieldValues = inputFieldValue;\n    currentFieldValues[field] = value;\n    setFieldValue(_objectSpread({}, currentFieldValues));\n  }, [fieldToValidate, inputFieldValue, setFieldValidation, setFieldValue]);\n  const handleSubmit = useCallback(() => {\n    if (!props.validate || props.validate && isValid()) {\n      props.onSubmit(inputFieldValue);\n    }\n  }, [isValid]);\n  return /*#__PURE__*/_jsx(Box, {\n    component: Container,\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"header\",\n          children: \"Add New Event\"\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextFieldComponent, {\n          required: true,\n          label: \"Title\",\n          onChange: event => handleFieldChange('title', event.target.value),\n          error: fieldToValidate.title,\n          onBlur: () => validate && validateField('title')\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextFieldComponent, {\n          label: \"Description\",\n          onChange: event => handleFieldChange('description', event.target.value)\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsx(TextFieldComponent, {\n          required: true,\n          label: \"Date and Time\",\n          onChange: event => handleFieldChange('date', event.target.value),\n          type: \"datetime-local\",\n          error: fieldToValidate.date,\n          onBlur: () => validate && validateField('date')\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsx(TextFieldComponent, {\n          required: true,\n          label: \"Event Type\",\n          onChange: event => handleFieldChange('type', event.target.value),\n          error: fieldToValidate.type,\n          onBlur: () => validate && validateField('type')\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsx(ButtonComponent, {\n          title: \"Add Event\",\n          onClick: handleSubmit\n        })\n      })]\n    })\n  });\n};\n\nAddEventBanner.defaultProps = {\n  validate: false\n};\nexport default AddEventBanner;","map":null,"metadata":{},"sourceType":"module"}